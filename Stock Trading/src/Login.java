
import java.awt.BorderLayout;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Set;
import java.util.TreeMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Cell;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import sun.util.logging.PlatformLogger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dell
 */
public class Login extends javax.swing.JFrame {

    Connection conn;
    ResultSet rs;
    PreparedStatement pst;
    
    DefaultTableModel dm;//=(DefaultTableModel) jTable1.getModel();
    /**
     * Creates new form Login
     */
    public Login() {
        super("Login!");
        initComponents();
        conn = javaConnect.ConnecrDb();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 0, 204)), "Login", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(0, 0, 153))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(0, 0, 153));

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Forgot Password");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Password");

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Sign Up");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Username");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 24, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(204, 0, 0));
        jTextField2.setText("Trouble Login...!");

        jButton4.setText("Admin Login");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Custom Query");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Back Up");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(216, 216, 216))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(27, 27, 27)
                                        .addComponent(jButton2))
                                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton5)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(jButton6)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String sql = "select * from Users where Username=? and Password=?";
        try{
            pst = conn.prepareStatement(sql);
            pst.setString(1,jTextField1.getText());
            pst.setString(2,jPasswordField1.getText());
            rs = pst.executeQuery();
            if(rs.next()){
                rs.close();
                pst.close();
                
                setVisible(false);
                //Loading ob = new Loading();
                //
                Loading ob = new Loading(jTextField1.getText());
                ob.setUpLoading();
                ob.setVisible(true);
            }
            else{
                JOptionPane.showMessageDialog(null, "Incorrect Username or Password");
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try{
                rs.close();
                pst.close();
            }
            catch(Exception e){
                
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private String getCellValue(int x,int y)
    {
        return dm.getValueAt(x,y).toString();
    }
    private void writetoExcel() //throws FileNotFoundException, IOException
    {
        XSSFWorkbook wb=new XSSFWorkbook();
        XSSFSheet ws=wb.createSheet();
        
        TreeMap<String,Object[]> data=new TreeMap<>();
        data.put("-1",new Object[]{dm.getColumnName(0),dm.getColumnName(1),dm.getColumnName(2),dm.getColumnName(3),dm.getColumnName(4),dm.getColumnName(5),dm.getColumnName(6),dm.getColumnName(7),dm.getColumnName(8)});
        
        for(int i=0;i<dm.getRowCount();i++)
        {
            data.put(Integer.toString(i),new Object[]{getCellValue(i,0),getCellValue(i,1),getCellValue(i,2),getCellValue(i,3),getCellValue(i,4),getCellValue(i,5),getCellValue(i,6),getCellValue(i,7),getCellValue(i,7)});
            
        }
        
        Set<String> ids=data.keySet();
        XSSFRow row;
        int rowID=0;
        
        for(String key: ids)
        {
            row=ws.createRow(rowID++);
            Object[] values=data.get(key);
            int cellID=0; 
            for(Object o: values)
            {
                XSSFCell cell =row.createCell(cellID++);
                cell.setCellValue (o.toString());
            }
        }
        
        try
        {
            try (FileOutputStream fos = new FileOutputStream(new File("F:/Excel/users.xlsx"))) {
                wb.write(fos);
            }
        }
        catch(FileNotFoundException ex)
        {
                    //Logger.getLogger(WorkBookNSheet.class.getName()).log(Level.SEVERE,null,ex);
        }
        catch(IOException ex){
               //Logger.getLogger(ExcelGUI.class.getName()).log(Level.SEVERE,null,ex);
        }
        
    }
    private void writetoExcel1() //throws FileNotFoundException, IOException
    {
        XSSFWorkbook wb=new XSSFWorkbook();
        XSSFSheet ws=wb.createSheet();
        
        TreeMap<String,Object[]> data=new TreeMap<>();
        data.put("-1",new Object[]{dm.getColumnName(0),dm.getColumnName(1),dm.getColumnName(2),dm.getColumnName(3),dm.getColumnName(4),dm.getColumnName(5)});
        
        for(int i=0;i<dm.getRowCount();i++)
        {
            data.put(Integer.toString(i),new Object[]{getCellValue(i,0),getCellValue(i,1),getCellValue(i,2),getCellValue(i,3),getCellValue(i,4),getCellValue(i,5)});
            
        }
        
        Set<String> ids=data.keySet();
        XSSFRow row;
        int rowID=0;
        
        for(String key: ids)
        {
            row=ws.createRow(rowID++);
            Object[] values=data.get(key);
            int cellID=0; 
            for(Object o: values)
            {
                XSSFCell cell =row.createCell(cellID++);
                cell.setCellValue (o.toString());
            }
        }
        
        try
        {
            try (FileOutputStream fos = new FileOutputStream(new File("F:/Excel/company.xlsx"))) {
                wb.write(fos);
            }
        }
        catch(FileNotFoundException ex)
        {
                    //Logger.getLogger(WorkBookNSheet.class.getName()).log(Level.SEVERE,null,ex);
        }
        catch(IOException ex){
               //Logger.getLogger(ExcelGUI.class.getName()).log(Level.SEVERE,null,ex);
        }
        
    }
    private void writetoExcel2() //throws FileNotFoundException, IOException
    {
        XSSFWorkbook wb=new XSSFWorkbook();
        XSSFSheet ws=wb.createSheet();
        
        TreeMap<String,Object[]> data=new TreeMap<>();
        data.put("-1",new Object[]{dm.getColumnName(0),dm.getColumnName(1),dm.getColumnName(2),dm.getColumnName(3),dm.getColumnName(4),dm.getColumnName(5)});
        
        for(int i=0;i<dm.getRowCount();i++)
        {
            data.put(Integer.toString(i),new Object[]{getCellValue(i,0),getCellValue(i,1),getCellValue(i,2),getCellValue(i,3),getCellValue(i,4),getCellValue(i,5)});
            
        }
        
        Set<String> ids=data.keySet();
        XSSFRow row;
        int rowID=0;
        
        for(String key: ids)
        {
            row=ws.createRow(rowID++);
            Object[] values=data.get(key);
            int cellID=0; 
            for(Object o: values)
            {
                XSSFCell cell =row.createCell(cellID++);
                cell.setCellValue (o.toString());
            }
        }
        
        try
        {
            try (FileOutputStream fos = new FileOutputStream(new File("F:/Excel/admin.xlsx"))) {
                wb.write(fos);
            }
        }
        catch(FileNotFoundException ex)
        {
                    //Logger.getLogger(WorkBookNSheet.class.getName()).log(Level.SEVERE,null,ex);
        }
        catch(IOException ex){
               //Logger.getLogger(ExcelGUI.class.getName()).log(Level.SEVERE,null,ex);
        }
        
    }
     private void writetoExcel3() //throws FileNotFoundException, IOException
    {
        XSSFWorkbook wb=new XSSFWorkbook();
        XSSFSheet ws=wb.createSheet();
        
        TreeMap<String,Object[]> data=new TreeMap<>();
        data.put("-1",new Object[]{dm.getColumnName(0),dm.getColumnName(1),dm.getColumnName(2),dm.getColumnName(3),dm.getColumnName(4),dm.getColumnName(5)});
        
        for(int i=0;i<dm.getRowCount();i++)
        {
            data.put(Integer.toString(i),new Object[]{getCellValue(i,0),getCellValue(i,1),getCellValue(i,2),getCellValue(i,3),getCellValue(i,4),getCellValue(i,5)});
            
        }
        
        Set<String> ids=data.keySet();
        XSSFRow row;
        int rowID=0;
        
        for(String key: ids)
        {
            row=ws.createRow(rowID++);
            Object[] values=data.get(key);
            int cellID=0; 
            for(Object o: values)
            {
                XSSFCell cell =row.createCell(cellID++);
                cell.setCellValue (o.toString());
            }
        }
        
        try
        {
            try (FileOutputStream fos = new FileOutputStream(new File("F:/Excel/transaction_h.xlsx"))) {
                wb.write(fos);
            }
        }
        catch(FileNotFoundException ex)
        {
                    //Logger.getLogger(WorkBookNSheet.class.getName()).log(Level.SEVERE,null,ex);
        }
        catch(IOException ex){
               //Logger.getLogger(ExcelGUI.class.getName()).log(Level.SEVERE,null,ex);
        }
        
    }
     
       private void writetoExcel4() //throws FileNotFoundException, IOException
    {
        XSSFWorkbook wb=new XSSFWorkbook();
        XSSFSheet ws=wb.createSheet();
        
        TreeMap<String,Object[]> data=new TreeMap<>();
        data.put("-1",new Object[]{dm.getColumnName(0),dm.getColumnName(1),dm.getColumnName(2),dm.getColumnName(3)});
        
        for(int i=0;i<dm.getRowCount();i++)
        {
            data.put(Integer.toString(i),new Object[]{getCellValue(i,0),getCellValue(i,1),getCellValue(i,2),getCellValue(i,3)});
            
        }
        
        Set<String> ids=data.keySet();
        XSSFRow row;
        int rowID=0;
        
        for(String key: ids)
        {
            row=ws.createRow(rowID++);
            Object[] values=data.get(key);
            int cellID=0; 
            for(Object o: values)
            {
                XSSFCell cell =row.createCell(cellID++);
                cell.setCellValue (o.toString());
            }
        }
        
        try
        {
            try (FileOutputStream fos = new FileOutputStream(new File("F:/Excel/portfolio.xlsx"))) {
                wb.write(fos);
            }
        }
        catch(FileNotFoundException ex)
        {
                    //Logger.getLogger(WorkBookNSheet.class.getName()).log(Level.SEVERE,null,ex);
        }
        catch(IOException ex){
               //Logger.getLogger(ExcelGUI.class.getName()).log(Level.SEVERE,null,ex);
        }
        
    }
       
         private void writetoExcel5() //throws FileNotFoundException, IOException
    {
        XSSFWorkbook wb=new XSSFWorkbook();
        XSSFSheet ws=wb.createSheet();
        
        TreeMap<String,Object[]> data=new TreeMap<>();
        data.put("-1",new Object[]{dm.getColumnName(0),dm.getColumnName(1),dm.getColumnName(2),dm.getColumnName(3),dm.getColumnName(4),dm.getColumnName(5)});
        
        for(int i=0;i<dm.getRowCount();i++)
        {
            data.put(Integer.toString(i),new Object[]{getCellValue(i,0),getCellValue(i,1),getCellValue(i,2),getCellValue(i,3),getCellValue(i,4),getCellValue(i,5)});
            
        }
        
        Set<String> ids=data.keySet();
        XSSFRow row;
        int rowID=0;
        
        for(String key: ids)
        {
            row=ws.createRow(rowID++);
            Object[] values=data.get(key);
            int cellID=0; 
            for(Object o: values)
            {
                XSSFCell cell =row.createCell(cellID++);
                cell.setCellValue (o.toString());
            }
        }
        
        try
        {
            try (FileOutputStream fos = new FileOutputStream(new File("F:/Excel/history_table.xlsx"))) {
                wb.write(fos);
            }
        }
        catch(FileNotFoundException ex)
        {
                    //Logger.getLogger(WorkBookNSheet.class.getName()).log(Level.SEVERE,null,ex);
        }
        catch(IOException ex){
               //Logger.getLogger(ExcelGUI.class.getName()).log(Level.SEVERE,null,ex);
        }
        
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        SignUp ob = new SignUp();
        ob.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        Forgot ob = new Forgot();
        ob.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        AdminLogin ob=new AdminLogin();
        ob.setVisible(true);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        CustomQuery ob=new CustomQuery();
        ob.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
        String sql="select * from users";
        //sql=jTextField1.getText();
        
         try{
            pst = conn.prepareStatement(sql);            
            rs = pst.executeQuery();
            
            ResultSetMetaData rsmt=rs.getMetaData();
            int c=rsmt.getColumnCount();
            Vector column =new Vector(c);
            for(int i=1;i<=c;i++)
            {
                column.add(rsmt.getColumnName(i));
            }
            Vector data=new Vector();
            Vector row=new Vector();
            
            while(rs.next())
            {
                row=new Vector(c);
                for(int i=1;i<=c;i++)
                {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            JFrame frame=new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            JPanel panel=new JPanel();           
            JTable table =new JTable(data,column);
            JScrollPane jsp=new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(false);
            dm=(DefaultTableModel) table.getModel();
         }
         catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try{
                rs.close();
                pst.close();
                JOptionPane.showMessageDialog(null, "BackUp Created");
            }
            catch(Exception e){
                
            }
        }
         
         writetoExcel();
         
         /////////
         String sql1="select * from company";
        //sql=jTextField1.getText();
        
         try{
            pst = conn.prepareStatement(sql1);            
            rs = pst.executeQuery();
            
            ResultSetMetaData rsmt=rs.getMetaData();
            int c=rsmt.getColumnCount();
            Vector column =new Vector(c);
            for(int i=1;i<=c;i++)
            {
                column.add(rsmt.getColumnName(i));
            }
            Vector data=new Vector();
            Vector row=new Vector();
            
            while(rs.next())
            {
                row=new Vector(c);
                for(int i=1;i<=c;i++)
                {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            JFrame frame=new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            JPanel panel=new JPanel();           
            JTable table =new JTable(data,column);
            JScrollPane jsp=new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(false);
            dm=(DefaultTableModel) table.getModel();
         }
         catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try{
                rs.close();
                pst.close();
                JOptionPane.showMessageDialog(null, "BackUp Created");
            }
            catch(Exception e){
                
            }
        }
         
         writetoExcel1();
         
         /////////////////
           String sql2="select * from admin";
        //sql=jTextField1.getText();
        
         try{
            pst = conn.prepareStatement(sql2);            
            rs = pst.executeQuery();
            
            ResultSetMetaData rsmt=rs.getMetaData();
            int c=rsmt.getColumnCount();
            Vector column =new Vector(c);
            for(int i=1;i<=c;i++)
            {
                column.add(rsmt.getColumnName(i));
            }
            Vector data=new Vector();
            Vector row=new Vector();
            
            while(rs.next())
            {
                row=new Vector(c);
                for(int i=1;i<=c;i++)
                {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            JFrame frame=new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            JPanel panel=new JPanel();           
            JTable table =new JTable(data,column);
            JScrollPane jsp=new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(false);
            dm=(DefaultTableModel) table.getModel();
         }
         catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try{
                rs.close();
                pst.close();
                JOptionPane.showMessageDialog(null, "BackUp Created");
            }
            catch(Exception e){
                
            }
        }
         
         writetoExcel2();
         
         ////////////////////////
         
         String sql3="select * from transaction_h";
        //sql=jTextField1.getText();
        
         try{
            pst = conn.prepareStatement(sql3);            
            rs = pst.executeQuery();
            
            ResultSetMetaData rsmt=rs.getMetaData();
            int c=rsmt.getColumnCount();
            Vector column =new Vector(c);
            for(int i=1;i<=c;i++)
            {
                column.add(rsmt.getColumnName(i));
            }
            Vector data=new Vector();
            Vector row=new Vector();
            
            while(rs.next())
            {
                row=new Vector(c);
                for(int i=1;i<=c;i++)
                {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            JFrame frame=new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            JPanel panel=new JPanel();           
            JTable table =new JTable(data,column);
            JScrollPane jsp=new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(false);
            dm=(DefaultTableModel) table.getModel();
         }
         catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try{
                rs.close();
                pst.close();
                JOptionPane.showMessageDialog(null, "BackUp Created");
            }
            catch(Exception e){
                
            }
        }
         
         writetoExcel3();
         
         /////////////////////////////////
         
          String sql4="select * from portfolio1";
        //sql=jTextField1.getText();
        
         try{
            pst = conn.prepareStatement(sql4);            
            rs = pst.executeQuery();
            
            ResultSetMetaData rsmt=rs.getMetaData();
            int c=rsmt.getColumnCount();
            Vector column =new Vector(c);
            for(int i=1;i<=c;i++)
            {
                column.add(rsmt.getColumnName(i));
            }
            Vector data=new Vector();
            Vector row=new Vector();
            
            while(rs.next())
            {
                row=new Vector(c);
                for(int i=1;i<=c;i++)
                {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            JFrame frame=new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            JPanel panel=new JPanel();           
            JTable table =new JTable(data,column);
            JScrollPane jsp=new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(false);
            dm=(DefaultTableModel) table.getModel();
         }
         catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try{
                rs.close();
                pst.close();
                JOptionPane.showMessageDialog(null, "BackUp Created");
            }
            catch(Exception e){
                
            }
        }
         
         writetoExcel4();
         
         /////////////////////////////////////
         
          String sql5="select * from history_table";
        //sql=jTextField1.getText();
        
         try{
            pst = conn.prepareStatement(sql5);            
            rs = pst.executeQuery();
            
            ResultSetMetaData rsmt=rs.getMetaData();
            int c=rsmt.getColumnCount();
            Vector column =new Vector(c);
            for(int i=1;i<=c;i++)
            {
                column.add(rsmt.getColumnName(i));
            }
            Vector data=new Vector();
            Vector row=new Vector();
            
            while(rs.next())
            {
                row=new Vector(c);
                for(int i=1;i<=c;i++)
                {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            JFrame frame=new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            JPanel panel=new JPanel();           
            JTable table =new JTable(data,column);
            JScrollPane jsp=new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(false);
            dm=(DefaultTableModel) table.getModel();
         }
         catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try{
                rs.close();
                pst.close();
                JOptionPane.showMessageDialog(null, "BackUp Created");
            }
            catch(Exception e){
                
            }
        }
         
         writetoExcel5();
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
